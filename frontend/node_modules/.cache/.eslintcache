[{"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\index.js":"1","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\store.js":"2","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\App.js":"4","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reducers\\cartReducers.js":"5","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reducers\\productReducers.js":"6","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reducers\\userReducers.js":"7","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Footer.js":"8","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reducers\\orderReducers.js":"9","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Header.js":"10","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\CartScreen.js":"11","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ProductScreen.js":"12","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\HomeScreen.js":"13","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\LoginScreen.js":"14","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ProfileScreen.js":"15","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\PaymentScreen.js":"16","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\RegisterScreen.js":"17","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\PlaceOrderScreen.js":"18","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ShippingScreen.js":"19","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\OrderScreen.js":"20","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Rating.js":"21","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Loader.js":"22","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Message.js":"23","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Product.js":"24","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\FormContainer.js":"25","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\CheckoutSteps.js":"26","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\constants\\cartConstants.js":"27","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\actions\\cartActions.js":"28","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\constants\\productConstants.js":"29","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\constants\\userConstants.js":"30","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\actions\\productActions.js":"31","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\actions\\userActions.js":"32","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\actions\\orderActions.js":"33","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\constants\\orderConstants.js":"34","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\UserListScreen.js":"35","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\UserEditScreen.js":"36","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ProductListScreen.js":"37","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ProductEditScreen.js":"38"},{"size":616,"mtime":1645371847659,"results":"39","hashOfConfig":"40"},{"size":2160,"mtime":1651495150102,"results":"41","hashOfConfig":"40"},{"size":375,"mtime":1645371847664,"results":"42","hashOfConfig":"40"},{"size":2278,"mtime":1651493742430,"results":"43","hashOfConfig":"40"},{"size":1539,"mtime":1645371847661,"results":"44","hashOfConfig":"40"},{"size":2947,"mtime":1651495132595,"results":"45","hashOfConfig":"40"},{"size":4060,"mtime":1651331099063,"results":"46","hashOfConfig":"40"},{"size":417,"mtime":1645371847651,"results":"47","hashOfConfig":"40"},{"size":2917,"mtime":1645959296415,"results":"48","hashOfConfig":"40"},{"size":3322,"mtime":1651302940521,"results":"49","hashOfConfig":"40"},{"size":4832,"mtime":1645371847665,"results":"50","hashOfConfig":"40"},{"size":5896,"mtime":1645371847669,"results":"51","hashOfConfig":"40"},{"size":1177,"mtime":1645371847666,"results":"52","hashOfConfig":"40"},{"size":2800,"mtime":1645371847666,"results":"53","hashOfConfig":"40"},{"size":6732,"mtime":1651326101763,"results":"54","hashOfConfig":"40"},{"size":1838,"mtime":1645371847668,"results":"55","hashOfConfig":"40"},{"size":4033,"mtime":1645371847671,"results":"56","hashOfConfig":"40"},{"size":6981,"mtime":1645371847669,"results":"57","hashOfConfig":"40"},{"size":3360,"mtime":1645371847671,"results":"58","hashOfConfig":"40"},{"size":8596,"mtime":1645965669023,"results":"59","hashOfConfig":"40"},{"size":1989,"mtime":1645371847655,"results":"60","hashOfConfig":"40"},{"size":477,"mtime":1645371847653,"results":"61","hashOfConfig":"40"},{"size":240,"mtime":1645371847653,"results":"62","hashOfConfig":"40"},{"size":1041,"mtime":1645371847654,"results":"63","hashOfConfig":"40"},{"size":392,"mtime":1645371847651,"results":"64","hashOfConfig":"40"},{"size":1682,"mtime":1645371847650,"results":"65","hashOfConfig":"40"},{"size":289,"mtime":1645371847656,"results":"66","hashOfConfig":"40"},{"size":1361,"mtime":1651479462327,"results":"67","hashOfConfig":"40"},{"size":1088,"mtime":1651495025711,"results":"68","hashOfConfig":"40"},{"size":1512,"mtime":1651329675965,"results":"69","hashOfConfig":"40"},{"size":4501,"mtime":1651499206517,"results":"70","hashOfConfig":"40"},{"size":7806,"mtime":1651331422884,"results":"71","hashOfConfig":"40"},{"size":4239,"mtime":1645959429370,"results":"72","hashOfConfig":"40"},{"size":858,"mtime":1645958216677,"results":"73","hashOfConfig":"40"},{"size":3720,"mtime":1651475250318,"results":"74","hashOfConfig":"40"},{"size":4145,"mtime":1651333822055,"results":"75","hashOfConfig":"40"},{"size":4881,"mtime":1651492358887,"results":"76","hashOfConfig":"40"},{"size":8520,"mtime":1653244864048,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},"2dktdh",{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"80"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"80"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"80"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"80"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"80"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"80"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"80"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"80"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"80"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"80"},{"filePath":"155","messages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"80"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"80"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"162","usedDeprecatedRules":"80"},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"80"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\index.js",[],["168","169"],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\store.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\App.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reducers\\cartReducers.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reducers\\productReducers.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reducers\\userReducers.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Footer.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\reducers\\orderReducers.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Header.js",["170","171","172"],"import React from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { Navbar, Nav, Container, Row, NavDropdown } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { logout } from '../actions/userActions'\r\n\r\nfunction Header() {\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logout())\r\n        navigate('/login')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <header>\r\n                <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" collapseOnSelect>\r\n                    <Container>\r\n                        <LinkContainer to=\"/\">\r\n                            <Navbar.Brand>ProShop</Navbar.Brand>\r\n                        </LinkContainer>\r\n\r\n                        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                            <Nav className=\"mr-auto\">\r\n\r\n                                <LinkContainer to=\"/cart\">\r\n                                    <Nav.Link><i className=\"fas fa-shopping-cart\"></i>Cart</Nav.Link>\r\n                                </LinkContainer>\r\n\r\n\r\n                                {userInfo ? (\r\n                                    <NavDropdown title={userInfo.name} id='username'>\r\n                                        <LinkContainer to='/profile'>\r\n                                            <NavDropdown.Item>Profile</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n                                        <NavDropdown.Item onClick={logoutHandler}>Logout</NavDropdown.Item>\r\n\r\n                                    </NavDropdown>\r\n                                ) : (\r\n\r\n                                    <LinkContainer to=\"/login\">\r\n                                        <Nav.Link><i className=\"fas fa-user\"></i>Login</Nav.Link>\r\n                                    </LinkContainer>\r\n\r\n                                )}\r\n\r\n                                {userInfo && userInfo.isAdmin && (\r\n                                    <NavDropdown title='Admin' id='adminmenu'>\r\n\r\n                                        <LinkContainer to='/admin/userlist'>\r\n                                            <NavDropdown.Item>Users</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n\r\n                                        <LinkContainer to='/admin/productlist'>\r\n                                            <NavDropdown.Item>Products</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n\r\n                                        <LinkContainer to='/admin/orderlist'>\r\n                                            <NavDropdown.Item>Orders</NavDropdown.Item>\r\n                                        </LinkContainer>\r\n\r\n                                    </NavDropdown>\r\n                                )}\r\n\r\n                            </Nav>\r\n                        </Navbar.Collapse>\r\n                    </Container>\r\n                </Navbar>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\CartScreen.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ProductScreen.js",["173","174"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Link, useParams, useNavigate } from 'react-router-dom'\r\nimport { Row, Col, Image, ListGroup, Button, Card, Form } from 'react-bootstrap'\r\nimport Rating from '../components/Rating'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listProductDetails } from '../actions/productActions'\r\n\r\nfunction ProductScreen() {\r\n\r\n    const match = useParams()\r\n    const navigate = useNavigate()\r\n    const { id } = match\r\n    const [qty, setQty] = useState(1)\r\n    const dispatch = useDispatch()\r\n    const productDetails = useSelector(state => state.productDetails)\r\n    const { loading, error, product } = productDetails\r\n\r\n    useEffect(() => {\r\n        dispatch(listProductDetails(Number(id)))\r\n\r\n    }, [dispatch, match])\r\n\r\n    const addToCartHandler = () => {\r\n        navigate(`/cart/${Number(id)}?qty=${qty}`)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to=\"/\" className=\"btn btn-light my-3\">Go Back</Link>\r\n            {loading ?\r\n                <Loader />\r\n                : error\r\n                    ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Row>\r\n                            <Col md={6}>\r\n                                <Image src={product.image} alt={product.name} fluid />\r\n                            </Col>\r\n\r\n                            <Col md={3}>\r\n                                <ListGroup variant=\"flush\">\r\n                                    <ListGroup.Item>\r\n                                        <h3>{product.name}</h3>\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item>\r\n                                        <Rating value={product.rating} text={`${product.numReviews} reviews`} color={'#f8e825'} />\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item>\r\n                                        Price: ${product.price}\r\n                                    </ListGroup.Item>\r\n                                    <ListGroup.Item>\r\n                                        Description: {product.description}\r\n                                    </ListGroup.Item>\r\n                                </ListGroup>\r\n                            </Col>\r\n\r\n                            <Col md={3}>\r\n                                <Card>\r\n                                    <ListGroup variant=\"flush\">\r\n                                        <ListGroup.Item>\r\n                                            <Row>\r\n                                                <Col>Price:</Col>\r\n                                                <Col>\r\n                                                    <strong>${product.price}</strong>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                        <ListGroup.Item>\r\n                                            <Row>\r\n                                                <Col>Status:</Col>\r\n                                                <Col>{product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}</Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n\r\n                                        {product.countInStock > 0 && (\r\n                                            <ListGroup.Item>\r\n                                                <Row>\r\n                                                    <Col>Qty</Col>\r\n                                                    <Col xs='auto' className='my-1'>\r\n                                                        <Form.Control\r\n                                                            as=\"select\"\r\n                                                            value={qty}\r\n                                                            onChange={(e) => setQty(e.target.value)}\r\n                                                        >\r\n                                                            {\r\n\r\n                                                                [...Array(product.countInStock).keys()].map((x) => (\r\n                                                                    <option key={x + 1} value={x + 1}>\r\n                                                                        {x + 1}\r\n                                                                    </option>\r\n                                                                ))\r\n                                                            }\r\n\r\n                                                        </Form.Control>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroup.Item>\r\n                                        )}\r\n\r\n                                        <ListGroup.Item>\r\n                                            <Button\r\n                                                onClick={addToCartHandler}\r\n                                                disabled={product.countInStock == 0}\r\n                                                className=\"btn-block w-100\"\r\n                                                type=\"button\">\r\n                                                Add to Cart\r\n                                            </Button>\r\n                                        </ListGroup.Item>\r\n                                    </ListGroup>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    )\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductScreen\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\HomeScreen.js",["175","176"],"import React, { useState, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport Product from '../components/Product'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { listProducts } from '../actions/productActions'\r\n\r\n\r\nfunction HomeScreen() {\r\n\r\n    const dispatch = useDispatch()\r\n    const productList = useSelector(state => state.productList)\r\n    const { error, loading, products } = productList\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch(listProducts())\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <h1>Latest Products</h1>\r\n            {loading ? <Loader />\r\n                : error ? <Message variant=\"danger\">{error}</Message>\r\n                    :\r\n                    <Row>\r\n                        {products.map(product => (\r\n                            <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\r\n                                <Product product={product} />\r\n                            </Col>\r\n                        ))}\r\n                    </Row>}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeScreen\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\LoginScreen.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ProfileScreen.js",["177","178"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { Form, Button, Row, Col, Table } from 'react-bootstrap'\r\nimport { LinkContainer } from 'react-router-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { getUserDetails, updateUserProfile } from '../actions/userActions'\r\nimport { USER_PROFILE_UPDATE_RESET } from '../constants/userConstants'\r\nimport { listMyOrders } from '../actions/orderActions'\r\n\r\nfunction ProfileScreen() {\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userUpdateProfile = useSelector(state => state.userUpdateProfile)\r\n    const { success } = userUpdateProfile\r\n\r\n    const orderMyList = useSelector(state => state.orderMyList)\r\n    const { loading: loadingOrders, error: errorOrders, orders } = orderMyList\r\n\r\n    useEffect(() => {\r\n        if (!userInfo) {\r\n            navigate('/login')\r\n        }\r\n        else {\r\n            if (!user || !user.name || success || userInfo._id !== user._id) {\r\n                dispatch({ type: USER_PROFILE_UPDATE_RESET })\r\n                dispatch(getUserDetails('profile'))\r\n                dispatch(listMyOrders())\r\n            }\r\n            else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n            }\r\n        }\r\n    }, [dispatch, navigate, userInfo, user, success])\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword) {\r\n            setMessage(\"Passwords do not match\")\r\n        }\r\n\r\n        else {\r\n            dispatch(updateUserProfile({\r\n                'id': user._id,\r\n                'name': name,\r\n                'email': email,\r\n                'password': password\r\n            }))\r\n\r\n            setMessage(\"\")\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <Row>\r\n            <Col md={3}>\r\n                <h2>User Profile</h2>\r\n                {message && <Message variant='danger'>{message}</Message>}\r\n                {error && <Message variant='danger'>{error}</Message>}\r\n                {loading && <Loader />}\r\n                <Form onSubmit={submitHandler}>\r\n                    <Form.Group controlId='name'>\r\n                        <Form.Label>Username</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='name'\r\n                            placeholder='Enter Username'\r\n                            value={name}\r\n                            onChange={(e) => setName(e.target.value)}\r\n                        >\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='email'>\r\n                        <Form.Label>Email</Form.Label>\r\n                        <Form.Control\r\n                            required\r\n                            type='email'\r\n                            placeholder='Enter Email'\r\n                            value={email}\r\n                            onChange={(e) => setEmail(e.target.value)}>\r\n\r\n                        </Form.Control>\r\n                    </Form.Group>\r\n\r\n                    <Form.Group controlId='password'>\r\n                        <Form.Label>Password</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Type Password'\r\n                            value={password}\r\n                            onChange={(e) => setPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n\r\n\r\n                    <Form.Group controlId='passwordConfirm'>\r\n                        <Form.Label>Password Again</Form.Label>\r\n                        <Form.Control\r\n\r\n                            type='password'\r\n                            placeholder='Confirm Password'\r\n                            value={confirmPassword}\r\n                            onChange={(e) => setConfirmPassword(e.target.value)}\r\n                        ></Form.Control>\r\n                    </Form.Group>\r\n\r\n\r\n                    <Button className='mt-3' type='submit' value='primary'>\r\n                        Update\r\n                    </Button>\r\n                </Form>\r\n\r\n            </Col>\r\n            <Col md={9}>\r\n                <h2>My Orders</h2>\r\n                {loadingOrders ? (\r\n                    <Loader />\r\n                ) : errorOrders ? (\r\n                    <Message variant='danger'>{errorOrders}</Message>\r\n                ) : (\r\n                    <Table striped responsive className='table-sm'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>ID</th>\r\n                                <th>Date</th>\r\n                                <th>Total</th>\r\n                                <th>Paid</th>\r\n                                <th>Delivered</th>\r\n                                <th></th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {orders.map(order => (\r\n                                <tr key={order._id}>\r\n                                    <td>{order._id}</td>\r\n                                    <td>{order.createdAt.substring(0, 10)}</td>\r\n                                    <td>${order.totalPrice}</td>\r\n                                    <td>{order.isPaid ? order.paidAt.substring(0, 10) : (\r\n                                        <i className='fas fa-times' style={{ color: 'red' }}></i>\r\n                                    )}</td>\r\n                                    <td>\r\n                                        <LinkContainer to={`/order/${order._id}`}>\r\n                                            <Button className=\"btn btn-sm\">Details</Button>\r\n                                        </LinkContainer>\r\n                                    </td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </Table>\r\n                )}\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default ProfileScreen\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\PaymentScreen.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\RegisterScreen.js",["179"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useLocation, useNavigate } from 'react-router-dom'\r\nimport { Form, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { register } from '../actions/userActions'\r\n\r\nfunction RegisterScreen() {\r\n\r\n    const navigate = useNavigate()\r\n    const location = useLocation()\r\n\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [confirmPassword, setConfirmPassword] = useState('')\r\n    const [message, setMessage] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n    const redirect = location.search ? location.search.split('=')[1] : '/'\r\n\r\n    const userRegister = useSelector(state => state.userRegister)\r\n    const { error, loading, userInfo } = userRegister\r\n\r\n    useEffect(() => {\r\n        if (userInfo) {\r\n            navigate(redirect)\r\n        }\r\n    }, [navigate, userInfo, redirect])\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        if (password != confirmPassword)\r\n            setMessage(\"Passwords do not match\")\r\n\r\n        else\r\n            dispatch(register(name, email, password))\r\n\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <h1>Register</h1>\r\n            {message && <Message variant='danger'>{message}</Message>}\r\n            {error && <Message variant='danger'>{error}</Message>}\r\n            {loading && <Loader />}\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='name'>\r\n                    <Form.Label>Username</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='name'\r\n                        placeholder='Enter Username'\r\n                        value={name}\r\n                        onChange={(e) => setName(e.target.value)}\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='email'>\r\n                    <Form.Label>Email</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='email'\r\n                        placeholder='Enter Email'\r\n                        value={email}\r\n                        onChange={(e) => setEmail(e.target.value)}>\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='password'>\r\n                    <Form.Label>Password</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Type Password'\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n\r\n                <Form.Group controlId='passwordConfirm'>\r\n                    <Form.Label>Password Again</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='password'\r\n                        placeholder='Confirm Password'\r\n                        value={confirmPassword}\r\n                        onChange={(e) => setConfirmPassword(e.target.value)}\r\n                    ></Form.Control>\r\n                </Form.Group>\r\n\r\n\r\n                <Button className='mt-3' type='submit' value='primary'>\r\n                    Register\r\n                </Button>\r\n            </Form>\r\n\r\n\r\n            <Row className=\"py-3\">\r\n                <Col>\r\n                    Already Have an Account? <Link to={redirect ? `/login?redirect=${redirect}` : '/login'}>\r\n                        Sign In\r\n                    </Link>\r\n                </Col>\r\n            </Row>\r\n\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default RegisterScreen\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\PlaceOrderScreen.js",["180","181","182"],"import React, { useEffect, useState } from 'react'\r\nimport { useNavigate, Link } from 'react-router-dom'\r\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Message from '../components/Message'\r\nimport Loader from '../components/Loader'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { createOrder } from '../actions/orderActions'\r\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants'\r\n\r\n\r\nfunction PlaceOrderScreen() {\r\n\r\n    const orderCreate = useSelector(state => state.orderCreate)\r\n    const { order, error, success } = orderCreate\r\n\r\n    const dispatch = useDispatch()\r\n    const cart = useSelector(state => state.cart)\r\n\r\n    const navigate = useNavigate()\r\n    cart.itemsPrice = cart.cartItems.reduce((acc, item) => acc + item.price * item.qty, 0).toFixed(2)\r\n    cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2)\r\n    cart.taxPrice = Number((0.082) * cart.itemsPrice).toFixed(2)\r\n\r\n    cart.totalPrice = (Number(cart.itemsPrice) + Number(cart.shippingPrice) + Number(cart.taxPrice)).toFixed(2)\r\n\r\n    useEffect(() => {\r\n        if (success) {\r\n            navigate(`/order/${order._id}`)\r\n            dispatch({\r\n                type: ORDER_CREATE_RESET\r\n            })\r\n        }\r\n    }, [success, navigate])\r\n\r\n    const placeOrder = () => {\r\n\r\n        if (!cart.paymentMethod) {\r\n            navigate('/payment')\r\n        } else {\r\n            dispatch(createOrder({\r\n                orderItems: cart.cartItems,\r\n                shippingAddress: cart.shippingAddress,\r\n                paymentMethod: cart.paymentMethod,\r\n                itemsPrice: cart.itemsPrice,\r\n                shippingPrice: cart.shippingPrice,\r\n                taxPrice: cart.taxPrice,\r\n                totalPrice: cart.totalPrice\r\n            }))\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <CheckoutSteps step1 step2 step3 step4 />\r\n            <Row>\r\n                <Col md={8}>\r\n                    <ListGroup variant=\"flush\">\r\n                        <ListGroup.Item>\r\n                            <h2>Shipping</h2>\r\n                            <p>\r\n                                <strong>Shipping: </strong>\r\n                                {cart.shippingAddress.address}, {cart.shippingAddress.city},\r\n                                {'  '}\r\n                                {cart.shippingAddress.postalCode},\r\n                                {'  '}\r\n                                {cart.shippingAddress.address}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Payment Method</h2>\r\n                            <p>\r\n                                <strong>Method: </strong>\r\n                                {cart.paymentMethod}\r\n                            </p>\r\n                        </ListGroup.Item>\r\n\r\n\r\n                        <ListGroup.Item>\r\n                            <h2>Order Items</h2>\r\n                            {cart.cartItems.length === 0 ?\r\n                                <Message variant='info'>\r\n                                    Your cart is empty\r\n                                </Message>\r\n                                : <ListGroup variant=\"flush\">\r\n                                    {cart.cartItems.map((item, index) => (\r\n                                        <ListGroup.Item key={index}>\r\n                                            <Row>\r\n                                                <Col md={1}>\r\n                                                    <Image src={item.image} alt={item.name} fluid rounded />\r\n                                                </Col>\r\n\r\n                                                <Col>\r\n                                                    <Link to={`/product/${item.product}`}>{item.name}</Link>\r\n                                                </Col>\r\n\r\n                                                <Col md={4}>\r\n                                                    {item.qty} X ${item.price} = {(item.qty * item.price).toFixed(2)}\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroup.Item>\r\n                                    ))}\r\n                                </ListGroup>\r\n                            }\r\n\r\n                        </ListGroup.Item>\r\n                    </ListGroup>\r\n                </Col>\r\n\r\n                <Col md={4}>\r\n                    <Card>\r\n                        <ListGroup variant=\"flush\">\r\n                            <ListGroup.Item className=\"mt-3\">\r\n                                <h2>Order Summary</h2>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item className=\"mt-1\">\r\n                                <Row>\r\n                                    <Col>Items:</Col>\r\n                                    <Col>${cart.itemsPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item className=\"mt-1\">\r\n                                <Row>\r\n                                    <Col>Shipping:</Col>\r\n                                    <Col>${cart.shippingPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item className=\"mt-1\">\r\n                                <Row>\r\n                                    <Col>Tax:</Col>\r\n                                    <Col>${cart.taxPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item className=\"mt-1\">\r\n                                <Row>\r\n                                    <Col>Total:</Col>\r\n                                    <Col>${cart.totalPrice}</Col>\r\n                                </Row>\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item>\r\n                                {error && <Message variant=\"danger\">{error}</Message>}\r\n                            </ListGroup.Item>\r\n\r\n                            <ListGroup.Item className=\"mt-1 \">\r\n                                <Button type=\"button\"\r\n                                    variant=\"primary\"\r\n                                    className=\"w-100 btn-block\"\r\n                                    disabled={cart.cartItems === 0}\r\n                                    onClick={placeOrder}\r\n                                >\r\n                                    Place Order\r\n                                </Button>\r\n                            </ListGroup.Item>\r\n                        </ListGroup>\r\n                    </Card>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PlaceOrderScreen\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ShippingScreen.js",["183"],"import React, { useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport FormContainer from '../components/FormContainer'\r\nimport CheckoutSteps from '../components/CheckoutSteps'\r\nimport { saveShippingAddress } from '../actions/cartActions'\r\n\r\nfunction ShippingScreen() {\r\n\r\n    const cart = useSelector(state => state.cart)\r\n    const { shippingAddress } = cart\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const [address, setAddress] = useState(shippingAddress.address)\r\n    const [city, setCity] = useState(shippingAddress.city)\r\n    const [postalCode, setPostalCode] = useState(shippingAddress.postalCode)\r\n    const [country, setCountry] = useState(shippingAddress.country)\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(saveShippingAddress({ address, city, postalCode, country }))\r\n        navigate('/payment')\r\n    }\r\n\r\n    return (\r\n        <FormContainer>\r\n            <CheckoutSteps step1 step2 />\r\n            <h1>Shipping</h1>\r\n            <Form onSubmit={submitHandler}>\r\n                <Form.Group controlId='address'>\r\n                    <Form.Label>Address</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter Address'\r\n                        value={address ? address : ''}\r\n                        onChange={(e) => setAddress(e.target.value)}\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='city'>\r\n                    <Form.Label>City</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter City'\r\n                        value={city ? city : ''}\r\n                        onChange={(e) => setCity(e.target.value)}\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='postalCode'>\r\n                    <Form.Label>Postal Code</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter postal code'\r\n                        value={postalCode ? postalCode : ''}\r\n                        onChange={(e) => setPostalCode(e.target.value)}\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Form.Group controlId='country'>\r\n                    <Form.Label>Country</Form.Label>\r\n                    <Form.Control\r\n                        required\r\n                        type='text'\r\n                        placeholder='Enter country'\r\n                        value={country ? country : ''}\r\n                        onChange={(e) => setCountry(e.target.value)}\r\n                    >\r\n\r\n                    </Form.Control>\r\n                </Form.Group>\r\n\r\n                <Button className=\"mt-3\" type='submit' variant=\"primary\">\r\n                    Continue\r\n                </Button>\r\n\r\n\r\n            </Form>\r\n        </FormContainer>\r\n    )\r\n}\r\n\r\nexport default ShippingScreen\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\OrderScreen.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Rating.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Loader.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Message.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\Product.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\FormContainer.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\components\\CheckoutSteps.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\constants\\cartConstants.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\actions\\cartActions.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\constants\\productConstants.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\actions\\productActions.js",["184"],"import axios from 'axios'\r\nimport {\r\n    PRODUCTS_LIST_REQUEST,\r\n    PRODUCTS_LIST_SUCCESS,\r\n    PRODUCTS_LIST_FAILURE,\r\n\r\n    PRODUCT_DETAILS_REQUEST,\r\n    PRODUCT_DETAILS_SUCCESS,\r\n    PRODUCT_DETAILS_FAILURE,\r\n\r\n    PRODUCT_DELETE_REQUEST,\r\n    PRODUCT_DELETE_SUCCESS,\r\n    PRODUCT_DELETE_FAILURE,\r\n\r\n    PRODUCT_CREATE_REQUEST,\r\n    PRODUCT_CREATE_SUCCESS,\r\n    PRODUCT_CREATE_FAILURE,\r\n\r\n    PRODUCT_UPDATE_REQUEST,\r\n    PRODUCT_UPDATE_SUCCESS,\r\n    PRODUCT_UPDATE_FAILURE,\r\n\r\n} from '../constants/productConstants'\r\n\r\n\r\nexport const listProducts = () => async (dispatch) => {\r\n\r\n    try {\r\n\r\n        dispatch({\r\n            type: PRODUCTS_LIST_REQUEST\r\n        })\r\n        const { data } = await axios.get('/api/products/')\r\n\r\n        dispatch({\r\n            type: PRODUCTS_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCTS_LIST_FAILURE,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const listProductDetails = (id) => async (dispatch) => {\r\n\r\n    try {\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_REQUEST\r\n        })\r\n        const { data } = await axios.get(`/api/products/${id}/`)\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    } catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_FAILURE,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport const deleteProduct = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/products/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: PRODUCT_DELETE_SUCCESS,\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_DELETE_FAILURE,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.message.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const createProduct = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/products/create/`,\r\n            {},\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: PRODUCT_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_CREATE_FAILURE,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.message.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateProduct = (product) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/products/update/${product._id}/`,\r\n            product,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: PRODUCT_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: PRODUCT_UPDATE_FAILURE,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.message.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\actions\\userActions.js",["185","186"],"import {\r\n    USER_LOGIN_REQUEST,\r\n    USER_LOGIN_SUCCESS,\r\n    USER_LOGIN_FAIL,\r\n\r\n    USER_LOGOUT,\r\n\r\n    USER_REGISTER_REQUEST,\r\n    USER_REGISTER_SUCCESS,\r\n    USER_REGISTER_FAIL,\r\n\r\n    USER_DETAILS_REQUEST,\r\n    USER_DETAILS_SUCCESS,\r\n    USER_DETAILS_FAIL,\r\n    USER_DETAILS_RESET,\r\n\r\n    USER_PROFILE_UPDATE_REQUEST,\r\n    USER_PROFILE_UPDATE_SUCCESS,\r\n    USER_PROFILE_UPDATE_FAIL,\r\n    USER_PROFILE_UPDATE_RESET,\r\n\r\n    USER_LIST_REQUEST,\r\n    USER_LIST_SUCCESS,\r\n    USER_LIST_FAIL,\r\n    USER_LIST_RESET,\r\n\r\n    USER_DELETE_REQUEST,\r\n    USER_DELETE_SUCCESS,\r\n    USER_DELETE_FAIL,\r\n\r\n    USER_UPDATE_REQUEST,\r\n    USER_UPDATE_SUCCESS,\r\n    USER_UPDATE_FAIL,\r\n    USER_UPDATE_RESET,\r\n\r\n} from '../constants/userConstants'\r\nimport axios from 'axios'\r\nimport { ORDER_MY_LIST_RESET } from '../constants/orderConstants'\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_LOGIN_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/login/',\r\n            { 'username': email, 'password': password },\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_LOGIN_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = () => (dispatch) => {\r\n\r\n    localStorage.removeItem(\"userInfo\")\r\n    dispatch({\r\n        type: USER_LOGOUT\r\n    })\r\n    dispatch({\r\n        type: USER_DETAILS_RESET\r\n    })\r\n    dispatch({\r\n        type: ORDER_MY_LIST_RESET\r\n    })\r\n    dispatch({\r\n        type: USER_LIST_RESET\r\n    })\r\n}\r\n\r\n\r\nexport const register = (name, email, password) => async (dispatch) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_REGISTER_REQUEST\r\n        })\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            '/api/users/register/',\r\n            { 'name': name, 'email': email, 'password': password },\r\n            config\r\n        )\r\n\r\n\r\n        dispatch({\r\n            type: USER_REGISTER_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_REGISTER_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const getUserDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_DETAILS_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/users/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUserProfile = (user) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: USER_PROFILE_UPDATE_REQUEST\r\n        })\r\n\r\n\r\n        const {\r\n            userLogin: { userInfo }\r\n        } = getState()\r\n\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            '/api/users/profile/update/',\r\n            user,\r\n            config\r\n        )\r\n\r\n\r\n        dispatch({\r\n            type: USER_PROFILE_UPDATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n\r\n        dispatch({\r\n            type: USER_LOGIN_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.setItem('userInfo', JSON.stringify(data))\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_PROFILE_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: USER_LIST_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            '/api/users/',\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n\r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const deleteUser = (id) => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: USER_DELETE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.delete(\r\n            `/api/users/delete/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_DELETE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n\r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_DELETE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n\r\n    try {\r\n        dispatch({\r\n            type: USER_UPDATE_REQUEST\r\n        })\r\n\r\n        const {\r\n            userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/users/update/${user._id}/`,\r\n            user,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: USER_UPDATE_SUCCESS,\r\n        })\r\n\r\n        dispatch({\r\n            type: USER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n\r\n    catch (error) {\r\n        dispatch({\r\n            type: USER_UPDATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.response.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\actions\\orderActions.js",["187","188"],"import axios from 'axios'\r\nimport {\r\n    ORDER_CREATE_REQUEST,\r\n    ORDER_CREATE_SUCCESS,\r\n    ORDER_CREATE_FAIL,\r\n\r\n    ORDER_DETAILS_REQUEST,\r\n    ORDER_DETAILS_SUCCESS,\r\n    ORDER_DETAILS_FAIL,\r\n\r\n    ORDER_PAY_REQUEST,\r\n    ORDER_PAY_SUCCESS,\r\n    ORDER_PAY_FAIL,\r\n    ORDER_PAY_RESET,\r\n\r\n    ORDER_MY_LIST_REQUEST,\r\n    ORDER_MY_LIST_SUCCESS,\r\n    ORDER_MY_LIST_FAIL,\r\n    ORDER_MY_LIST_RESET\r\n\r\n} from '../constants/orderConstants'\r\nimport { CART_CLEAR_ITEMS } from '../constants/cartConstants'\r\n\r\n\r\nexport const createOrder = (order) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_CREATE_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.post(\r\n            `/api/orders/add/`,\r\n            order,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_CREATE_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n        dispatch({\r\n            type: CART_CLEAR_ITEMS,\r\n            payload: data\r\n        })\r\n\r\n        localStorage.removeItem('cartItems')\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: ORDER_CREATE_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.message.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getOrderDetails = (id) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_DETAILS_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/${id}/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_DETAILS_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: ORDER_DETAILS_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.message.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const payOrder = (id, paymentResult) => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_PAY_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.put(\r\n            `/api/orders/${id}/pay/`,\r\n            paymentResult,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_PAY_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: ORDER_PAY_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.message.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}\r\n\r\n\r\nexport const listMyOrders = () => async (dispatch, getState) => {\r\n    try {\r\n        dispatch({\r\n            type: ORDER_MY_LIST_REQUEST\r\n        })\r\n\r\n        const { userLogin: { userInfo }\r\n        } = getState()\r\n\r\n        const config = {\r\n            headers: {\r\n                'Content-type': 'application/json',\r\n                Authorization: `Bearer ${userInfo.token}`\r\n            }\r\n        }\r\n\r\n        const { data } = await axios.get(\r\n            `/api/orders/myorders/`,\r\n            config\r\n        )\r\n\r\n        dispatch({\r\n            type: ORDER_MY_LIST_SUCCESS,\r\n            payload: data\r\n        })\r\n\r\n    }\r\n    catch (error) {\r\n        dispatch({\r\n            type: ORDER_MY_LIST_FAIL,\r\n            payload: error.response && error.response.data.detail\r\n                ? error.message.data.detail\r\n                : error.message\r\n        })\r\n    }\r\n}","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\constants\\orderConstants.js",[],"C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\UserListScreen.js",["189","190","191","192"],"import React, { useEffect, useState } from 'react';\r\nimport { LinkContainer, useLocation } from 'react-router-bootstrap'\r\nimport { Table, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { deleteUser, listUsers } from '../actions/userActions'\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction UserListScreen() {\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const userList = useSelector(state => state.userList)\r\n    const { loading, error, users } = userList\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    const userDelete = useSelector(state => state.userDelete)\r\n    const { success: successDelete, loading: loadingDelete, error: errorDelete } = userDelete\r\n\r\n    useEffect(() => {\r\n        if (userInfo && userInfo.isAdmin) {\r\n            dispatch(listUsers())\r\n        } else {\r\n            navigate('/login')\r\n        }\r\n    }, [dispatch, navigate, successDelete, userInfo])\r\n\r\n    const deleteHandler = (id) => {\r\n        if (window.confirm('Are you sure you want to delete this user?')) {\r\n            dispatch(deleteUser(id))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1>Users</h1>\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant=\"danger\">{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>NAME</th>\r\n                                    <th>EMAIL</th>\r\n                                    <th>ADMIN</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {users.map(user => (\r\n                                    <tr key={user._id}>\r\n                                        <td>{user._id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        <td>{user.isAdmin ? (\r\n                                            <i className='fas fa-check' style={{ color: 'green' }}></i>\r\n                                        ) : (\r\n                                            <i className='fas fa-check' style={{ color: 'red' }}></i>\r\n\r\n                                        )}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/user/${user._id}/edit`}>\r\n                                                <Button variant='dark' className='btn-sm'>\r\n                                                    <i className='fas fa-edit' ></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(user._id)}>\r\n                                                <i className='fas fa-trash' ></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserListScreen","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\UserEditScreen.js",["193","194"],"import React, { useEffect, useState } from 'react';\r\nimport { Link, useLocation, useNavigate, useParams } from 'react-router-dom'\r\nimport { Form, Button } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport FormContainer from '../components/FormContainer'\r\nimport { getUserDetails, updateUser } from '../actions/userActions'\r\nimport { USER_UPDATE_RESET } from '../constants/userConstants'\r\n\r\nfunction UserEditScreen() {\r\n\r\n    const navigate = useNavigate()\r\n    const match = useParams()\r\n    const { id } = match\r\n\r\n    const userId = Number(id)\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isAdmin, setIsAdmin] = useState(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const userDetails = useSelector(state => state.userDetails)\r\n    const { error, loading, user } = userDetails\r\n\r\n\r\n    const userUpdate = useSelector(state => state.userUpdate)\r\n    const { error: errorUpdate, loading: loadingUpdate, success: successUpdate } = userUpdate\r\n\r\n\r\n    useEffect(() => {\r\n        if (successUpdate) {\r\n            dispatch({ type: USER_UPDATE_RESET })\r\n            navigate('/admin/userlist')\r\n        } else {\r\n\r\n            if (!user.name || user._id !== Number(userId)) {\r\n                dispatch(getUserDetails(userId))\r\n            } else {\r\n                setName(user.name)\r\n                setEmail(user.email)\r\n                setIsAdmin(user.isAdmin)\r\n            }\r\n        }\r\n    }, [user, userId, successUpdate, navigate])\r\n\r\n\r\n    const submitHandler = (e) => {\r\n        e.preventDefault()\r\n        dispatch(updateUser({ _id: user._id, name, email, isAdmin }))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Link to='/admin/userlist' className=\"btn btn-light my-3\">\r\n                Go Back\r\n            </Link>\r\n\r\n            <FormContainer>\r\n                <h1>Edit User</h1>\r\n\r\n                {loadingUpdate && <Loader />}\r\n                {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\r\n                \r\n                {loading ? <Loader /> : error ? <Message variant='danger'>{error}</Message>\r\n                    : (\r\n                        <Form onSubmit={submitHandler}>\r\n                            <Form.Group controlId='name'>\r\n                                <Form.Label>Username</Form.Label>\r\n                                <Form.Control\r\n                                    type='name'\r\n                                    placeholder='Enter Username'\r\n                                    value={name}\r\n                                    onChange={(e) => setName(e.target.value)}\r\n                                >\r\n\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='email'>\r\n                                <Form.Label>Email Address</Form.Label>\r\n                                <Form.Control\r\n                                    type='email'\r\n                                    placeholder='Enter Email'\r\n                                    value={email}\r\n                                    onChange={(e) => setEmail(e.target.value)}>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n\r\n                            <Form.Group controlId='isAdmin' className='mt-3'>\r\n                                <Form.Check\r\n                                    type='checkbox'\r\n                                    label='Is Admin'\r\n                                    checked={isAdmin}\r\n                                    onChange={(e) => setIsAdmin(e.target.checked)}\r\n                                ></Form.Check>\r\n                            </Form.Group>\r\n\r\n                            <Button className='mt-3' type='submit' value='primary'>\r\n                                Update\r\n                            </Button>\r\n                        </Form>)\r\n                }\r\n\r\n            </FormContainer>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserEditScreen\r\n","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ProductListScreen.js",["195","196","197","198"],"import React, { useEffect, useState } from 'react';\r\nimport { LinkContainer, useLocation } from 'react-router-bootstrap'\r\nimport { Table, Button, Row, Col } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport Loader from '../components/Loader'\r\nimport Message from '../components/Message'\r\nimport { createProduct, deleteProduct, listProducts } from '../actions/productActions'\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants'\r\n\r\nfunction ProductListScreen() {\r\n\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n    const match = useParams()\r\n    const { id } = match\r\n\r\n    const productList = useSelector(state => state.productList)\r\n    const { loading, error, products } = productList\r\n\r\n    const productDelete = useSelector(state => state.productDelete)\r\n    const { loading: loadingDelete, error: errorDelete, success: successDelete } = productDelete\r\n\r\n    const productCreate = useSelector(state => state.productCreate)\r\n    const { loading: loadingCreate, error: errorCreate, success: successCreate, product: createdProduct } = productCreate\r\n\r\n    const userLogin = useSelector(state => state.userLogin)\r\n    const { userInfo } = userLogin\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch({ type: PRODUCT_CREATE_RESET })\r\n\r\n        if (!userInfo.isAdmin) {\r\n            navigate('/login')\r\n        }\r\n\r\n        if (successCreate) {\r\n            navigate(`/admin/product/${createdProduct._id}/edit`)\r\n        } else {\r\n            dispatch(listProducts())\r\n        }\r\n\r\n    }, [dispatch, navigate, userInfo, successDelete, successCreate, createProduct])\r\n\r\n    const deleteHandler = (id) => {\r\n        if (window.confirm('Are you sure you want to delete this user?')) {\r\n            dispatch(deleteProduct(id))\r\n        }\r\n    }\r\n\r\n    const createProductHandler = () => {\r\n        dispatch(createProduct())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Row className='align-items-center'>\r\n                <Col>\r\n                    <h1>Products</h1>\r\n                </Col>\r\n                <Col className='text-end'>\r\n                    <Button className='my-3' onClick={createProductHandler}>\r\n                        <i className='fas fa-plus'></i>&nbsp;&nbsp;Create Product\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n\r\n            {loadingDelete && <Loader />}\r\n            {errorDelete && <Message variant=\"danger\">{errorDelete}</Message>}\r\n\r\n            {loadingCreate && <Loader />}\r\n            {errorCreate && <Message variant=\"danger\">{errorCreate}</Message>}\r\n\r\n\r\n            {loading\r\n                ? (<Loader />)\r\n                : error\r\n                    ? (<Message variant=\"danger\">{error}</Message>)\r\n                    : (\r\n                        <Table striped bordered hover responsive className='table-sm'>\r\n\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>ID</th>\r\n                                    <th>NAME</th>\r\n                                    <th>PRICE</th>\r\n                                    <th>CATEGORY</th>\r\n                                    <th>BRAND</th>\r\n                                    <th></th>\r\n                                </tr>\r\n                            </thead>\r\n\r\n                            <tbody>\r\n                                {products.map(product => (\r\n                                    <tr key={product._id}>\r\n                                        <td>{product._id}</td>\r\n                                        <td>{product.name}</td>\r\n                                        <td>${product.price}</td>\r\n                                        <td>{product.category}</td>\r\n                                        <td>{product.brand}</td>\r\n\r\n                                        <td>\r\n                                            <LinkContainer to={`/admin/product/${product._id}/edit`}>\r\n                                                <Button variant='dark' className='btn-sm'>\r\n                                                    <i className='fas fa-edit' ></i>\r\n                                                </Button>\r\n                                            </LinkContainer>\r\n\r\n                                            <Button variant='danger' className='btn-sm' onClick={() => deleteHandler(product._id)}>\r\n                                                <i className='fas fa-trash' ></i>\r\n                                            </Button>\r\n                                        </td>\r\n                                    </tr>\r\n                                ))}\r\n                            </tbody>\r\n\r\n                        </Table>\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProductListScreen","C:\\Users\\iLaptop.pk\\Desktop\\Django-React-Ecommerce-website\\frontend\\src\\screens\\ProductEditScreen.js",["199","200"],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":3,"column":10,"nodeType":"207","messageId":"208","endLine":3,"endColumn":14},{"ruleId":"205","severity":1,"message":"209","line":3,"column":16,"nodeType":"207","messageId":"208","endLine":3,"endColumn":27},{"ruleId":"205","severity":1,"message":"210","line":4,"column":34,"nodeType":"207","messageId":"208","endLine":4,"endColumn":37},{"ruleId":"211","severity":1,"message":"212","line":23,"column":8,"nodeType":"213","endLine":23,"endColumn":25,"suggestions":"214"},{"ruleId":"215","severity":1,"message":"216","line":105,"column":80,"nodeType":"217","messageId":"218","endLine":105,"endColumn":82},{"ruleId":"205","severity":1,"message":"219","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":25},{"ruleId":"211","severity":1,"message":"220","line":20,"column":8,"nodeType":"213","endLine":20,"endColumn":10,"suggestions":"221"},{"ruleId":"205","severity":1,"message":"206","line":2,"column":10,"nodeType":"207","messageId":"208","endLine":2,"endColumn":14},{"ruleId":"215","severity":1,"message":"222","line":58,"column":22,"nodeType":"217","messageId":"218","endLine":58,"endColumn":24},{"ruleId":"215","severity":1,"message":"222","line":37,"column":22,"nodeType":"217","messageId":"218","endLine":37,"endColumn":24},{"ruleId":"205","severity":1,"message":"219","line":1,"column":28,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"223","line":6,"column":8,"nodeType":"207","messageId":"208","endLine":6,"endColumn":14},{"ruleId":"211","severity":1,"message":"224","line":34,"column":8,"nodeType":"213","endLine":34,"endColumn":27,"suggestions":"225"},{"ruleId":"205","severity":1,"message":"226","line":1,"column":17,"nodeType":"207","messageId":"208","endLine":1,"endColumn":26},{"ruleId":"205","severity":1,"message":"227","line":93,"column":17,"nodeType":"207","messageId":"208","endLine":93,"endColumn":21},{"ruleId":"205","severity":1,"message":"228","line":20,"column":5,"nodeType":"207","messageId":"208","endLine":20,"endColumn":30},{"ruleId":"205","severity":1,"message":"229","line":34,"column":5,"nodeType":"207","messageId":"208","endLine":34,"endColumn":22},{"ruleId":"205","severity":1,"message":"230","line":14,"column":5,"nodeType":"207","messageId":"208","endLine":14,"endColumn":20},{"ruleId":"205","severity":1,"message":"231","line":19,"column":5,"nodeType":"207","messageId":"208","endLine":19,"endColumn":24},{"ruleId":"205","severity":1,"message":"219","line":1,"column":28,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"209","line":2,"column":25,"nodeType":"207","messageId":"208","endLine":2,"endColumn":36},{"ruleId":"205","severity":1,"message":"232","line":22,"column":46,"nodeType":"207","messageId":"208","endLine":22,"endColumn":59},{"ruleId":"205","severity":1,"message":"233","line":22,"column":68,"nodeType":"207","messageId":"208","endLine":22,"endColumn":79},{"ruleId":"205","severity":1,"message":"209","line":2,"column":16,"nodeType":"207","messageId":"208","endLine":2,"endColumn":27},{"ruleId":"211","severity":1,"message":"220","line":46,"column":8,"nodeType":"213","endLine":46,"endColumn":47,"suggestions":"234"},{"ruleId":"205","severity":1,"message":"219","line":1,"column":28,"nodeType":"207","messageId":"208","endLine":1,"endColumn":36},{"ruleId":"205","severity":1,"message":"209","line":2,"column":25,"nodeType":"207","messageId":"208","endLine":2,"endColumn":36},{"ruleId":"205","severity":1,"message":"235","line":16,"column":13,"nodeType":"207","messageId":"208","endLine":16,"endColumn":15},{"ruleId":"211","severity":1,"message":"236","line":44,"column":8,"nodeType":"213","endLine":44,"endColumn":83,"suggestions":"237"},{"ruleId":"205","severity":1,"message":"238","line":3,"column":8,"nodeType":"207","messageId":"208","endLine":3,"endColumn":16},{"ruleId":"205","severity":1,"message":"209","line":4,"column":16,"nodeType":"207","messageId":"208","endLine":4,"endColumn":27},"no-native-reassign",["239"],"no-negated-in-lhs",["240"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'useLocation' is defined but never used.","'Row' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["241"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["242"],"Expected '!==' and instead saw '!='.","'Loader' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.",["243"],"'useEffect' is defined but never used.","'data' is assigned a value but never used.","'USER_PROFILE_UPDATE_RESET' is defined but never used.","'USER_UPDATE_RESET' is defined but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_MY_LIST_RESET' is defined but never used.","'loadingDelete' is assigned a value but never used.","'errorDelete' is assigned a value but never used.",["244"],"'id' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createdProduct._id'. Either include it or remove the dependency array. Outer scope values like 'createProduct' aren't valid dependencies because mutating them doesn't re-render the component.",["245"],"'FormFile' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"250","fix":"251"},{"desc":"252","fix":"253"},{"desc":"254","fix":"255"},"Update the dependencies array to be: [dispatch, id, match]",{"range":"256","text":"257"},"Update the dependencies array to be: [dispatch]",{"range":"258","text":"259"},"Update the dependencies array to be: [success, navigate, order._id, dispatch]",{"range":"260","text":"261"},"Update the dependencies array to be: [user, userId, successUpdate, navigate, dispatch]",{"range":"262","text":"263"},"Update the dependencies array to be: [dispatch, navigate, userInfo, successDelete, successCreate, createdProduct._id]",{"range":"264","text":"265"},[861,878],"[dispatch, id, match]",[599,601],"[dispatch]",[1332,1351],"[success, navigate, order._id, dispatch]",[1578,1617],"[user, userId, successUpdate, navigate, dispatch]",[1622,1697],"[dispatch, navigate, userInfo, successDelete, successCreate, createdProduct._id]"]